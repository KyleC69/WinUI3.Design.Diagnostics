// Project Name: WinUI3.Diagnostics
// File Name: OverlayHost.xaml.cs
// Author: Kyle Crowder
// Github:  OldSkoolzRoolz
// Distributed under Open Source License
// Do not remove file headers


using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;

using System.Collections.ObjectModel;


namespace WinUI3.Diagnostics.Controls;


public sealed partial class OverlayHost : UserControl
{
    public OverlayHost()
    {
        InitializeComponent();
        // No need to assign HighlightCanvasField here; it is initialized by XAML partial class
    }





    public bool IsOpen
    {
        get => Root.Visibility == Visibility.Visible;
        set => Root.Visibility = value ? Visibility.Visible : Visibility.Collapsed;
    }

    public ObservableCollection<TreeNode> Nodes { get; } = new();

    // This field is generated by the XAML partial class, do not redeclare or assign it
    // private readonly Canvas HighlightCanvasField;
    // Instead, use the field generated by XAML, which is named after the x:Name in XAML
    // For clarity, alias it:
    public Canvas HighlightCanvasField => HighlightCanvas;





    public void Initialize(VisualTreeExplorer tree, SelectionController selector)
    {
        Nodes.Clear();
        foreach (TreeNode n in tree.Nodes) Nodes.Add(n);

        Tree.ItemInvoked += (s, e) =>
        {
            if (e.InvokedItem is TreeNode node && node.Target is FrameworkElement fe)
                selector.Select(fe);
        };
    }





#nullable enable
    public void OnSelectionChanged(FrameworkElement? fe)
    {
        Details.SetElement(fe);
    }
}